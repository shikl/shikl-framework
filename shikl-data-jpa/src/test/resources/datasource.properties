#开启多数据源， 实现读写分离#
jdbc.multi.enable=false
#写库的节点数量
jdbc.multi.master.datanode =2
#读库的节点数量
jdbc.multi.slave.datanode=2

jdbc.multi.master0.url=jdbc:mysql://192.168.132.130:3306/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true
jdbc.multi.master0.username=root
jdbc.multi.master0.password=123456

jdbc.multi.master1.url=jdbc:mysql://192.168.132.130:3306/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true
jdbc.multi.master1.username=root
jdbc.multi.master1.password=123456

jdbc.multi.slave0.url=jdbc:mysql://192.168.132.130:3307/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true
jdbc.multi.slave0.username=root
jdbc.multi.slave0.password=123456

jdbc.multi.slave1.url=jdbc:mysql://192.168.132.130:3307/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true
jdbc.multi.slave1.username=root
jdbc.multi.slave1.password=123456



#######################################
#配置hibernate 方言
#######################################
#hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.dialect=org.hibernate.dialect.MySQLDialect
#####################################
#数据库连接
#####################################
#jdbc.driverClassName=org.h2.Driver
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://192.168.132.130:3307/db1?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true
jdbc.username=root
jdbc.password=123456

#自动更新表结构
scheme.auto=update

entity.scan.packages =

hibernate.show_sql=false

hibernate.format_sql=false

#db.driverClassName=com.mysql.jdbc.Driver
#db.url=jdbc:mysql://localhost:3306/rplus_web?useUnicode=true&amp;characterEncoding=UTF-8
#db.username=root
#db.password=123456


########################################
#连接池配置
########################################

#\u914D\u7F6E\u521D\u59CB\u5316\u5927\u5C0F\u3001\u6700\u5C0F\u3001\u6700\u5927
pool.initialSize=1
pool.minIdle=1
pool.maxActive=20

#配置获取连接等待超时的时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
pool.maxWait=60000

#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
pool.timeBetweenEvictionRunsMillis=60000

#配置一个连接在池中最小生存的时间，单位是毫秒
 pool.minEvictableIdleTimeMillis=300000

 #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
 pool.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
 pool.maxPoolPreparedStatementPerConnectionSize=20